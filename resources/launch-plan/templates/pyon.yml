# Central configuration file for ION container, system and services.
# The contents are transformed into a dict that supports dot notation:
#   CFG.server.amqp.host
# Do not modify this file! Set overrides in pyon.local.yml or in rel files


# ----------------------------------------------------------------------------------
# The "system" root entry defines settings for the distributed ION system that this
# container starts or joins. A system comprises all containers with the same sysname.
system:
  # Override for sysname in tests. Usually set via pycc command line
  name:

  # Name of the Org that bootstraps the system. Super-Org in Release 2
  root_org: ION

  # The name of the ION System ActorIdentity
  system_actor: ionsystem

  # Global flag indicating degraded mode during initial bootstrap phases
  # (e.g. no use of RR, messaging, datastore, events, etc). Will be cleared when bootstrapped.
  bootstrapping: True

  # Global flag indicating debug mode. Code can perform more expensive operations if True
  debug: True

  # If true, the first container started will bootstrap the system config and interfaces
  # into the directory and resource registry to avoid explicit pre-initialization step.
  auto_bootstrap: True

  # Global config for use of a Real SMTP server or a fake logging class
  # True is Real, False is fake
  smtp: False

  # Use ElasticSearch ?
  elasticsearch: False

# ----------------------------------------------------------------------------------
# The "server" root entry defines profiles for connections/credentials to external servers
# These entries are names of server/credential profiles that can be referenced in other settings.
server:
  amqp:
    # The normal container broker connection
    type: amqp_91
    host: ::RABBIT-SERVER::
    port: 5672
    username: guest
    password: guest
    vhost: /
    heartbeat: 30
  amqp_priv:
    # The privileged broker connection that the Exchange Management Service uses
    type: amqp_91
    host: ::RABBIT-SERVER::
    port: 5672
    username: ion
    password: ion
    vhost: /
    heartbeat: 30
  couchdb:
    # The basic CouchDB connection
    type: couchdb
    host: ::COUCH-SERVER::
    port: 5984
    username: coi
    password: coi
  smtp:
    # Outgoing email server
    type: smtp
    host: localhost
    port: 25
    sender: me@email.com
    password: Iwillnotell
  elasticsearch:
    # Search index server
    type:           elasticsearch
    host:           localhost
    port:           9200
    shards:         1        # Defines the default number of shards for indexes
    replicas:       0        # Defines the default number of replicas for each shard
    river_shards:   1        # Defines the number of shards for the _river
    river_replicas: 0        # Defines the number of replicas (important) for the _river
                             # This number should be the number of nodes running exactly
# Example of production-like configuration
#    shards: 5
#    replicas: 1
#    river_shards: 5
#    replicas: 1

# ----------------------------------------------------------------------------------
# The "container" root entry defines settings for the current Pyon container
container:
  directory:
    server: couchdb

  exchange:
    auto_register: True

  messaging:
    server:
      primary: amqp
      priviledged:
    endpoint: # TBD: move entries to here
    interceptor: # TBD: move entries to here

  objects:
    validate: # TBD: move entries to here

  filesystem:
      force_clean: False
      cache: /tmp/ion/run/cache
      temp: /tmp/ion/tmp
      run: /tmp/ion/run
      log: /tmp/ion/run/log
      users: /tmp/ion/usr
      resource: /tmp/ion/res
      library: /tmp/ion/lib

  service_gateway:
    web_server:
      port: 5000
    trusted_originators: []  #Optional list of trusted addresses; an empty list means open system
    user_cache_size: 2000    #The number of user's whos role data is cached in the gateway

      
# TBD: Rename to "container". See there.
cc:
  timeout:
    shutdown: 30.0
    heartbeat: 3.0
  proctype: green   # Type of ION process to spawn for new services/processes (green or python)

validate:
  setattr: True

endpoint:
  receive:
    timeout: 10   # RPC receive timeout in seconds

interceptor:
  interceptors:
    sample:
      class: pyon.core.interceptor.sample.SampleInterceptor
    sampleprocessonly:
      class: pyon.core.interceptor.sample.SampleProcessOnlyInterceptor
    codec:
      class: pyon.core.interceptor.codec.CodecInterceptor
    validate:
      class: pyon.core.interceptor.validate.ValidateInterceptor
      config:
        enabled: true
    encode:
      class: pyon.core.interceptor.encode.EncodeInterceptor
    governance:
      class: pyon.core.governance.governance_interceptor.GovernanceInterceptor
      config:
        enabled: true
        interceptor_order: [conversation, information, policy]
        governance_interceptors:
          conversation:
            class: pyon.core.governance.conversation.conversation_monitor_interceptor.ConversationMonitorInterceptor
          information:
            class: pyon.core.governance.information.information_model_interceptor.InformationModelInterceptor
          policy:
            class: pyon.core.governance.policy.policy_interceptor.PolicyInterceptor

  stack:
    message_outgoing: [codec, encode]
    message_incoming: [encode, codec]
    process_outgoing: [governance]
    process_incoming: [governance]

# TBD: Rename system.exchange_spaces
exchange_spaces:
   # define the names and structure of exchange spaces and exchange points
    ioncore:
        exchange_points:
            science_data:
                type: topic_tree
            events:
                type: topic_tree

# TBD: Rename system.core_xps
core_xps:
    # used as defaults by pyon.ion.endpoint and PubSub Mgmt Service
    science_data: ioncore.science_data
    events: ioncore.events

core_stream_types:
    - "BlogStreamType"
    - "ScienceStreamType"


# ----------------------------------------------------------------------------------
# The "service" root entry
service:
  instrument_management:
    driver_release_host: amoeba.ucsd.edu
    driver_release_directory: /var/www/releases


# TBD: Remove (use global flags instead)
external_data_agent_management:
  persistent: true


# ----------------------------------------------------------------------------------
# The "event" root entry defines event types and event originators, and it
# specifies which events each originator can publish
event:
  originators: [container, 
                process, 
                application, 
                datasource, 
                dataset, 
                resource_agent, 
                service]
  types: [resource_lifecycle,
          container_lifecycle,
          process_lifecycle,
          app_loader,
          container_startup,
          datasource_update,
          schedule,
          datasource_unavailable,
          dataset_supplement_added,
          business_state_modification,
          dataset_change,
          datasource_change,
          ingestion_processing,
          new_subscription,
          del_subscription,
          data,
          data_block,
          instrument_sample_data,          
          stream_ingestion_policy]
  container: [container_lifecycle, 
              container_startup]
  process: [process_lifecycle]
  application: [app_loader, 
                schedule, 
                business_state_modification]
  datasource: [datasource_update, 
               datasource_unavailable,
               datasource_change]
  dataset: [dataset_supplement_added, 
            dataset_change]
  resource_agent: [resource_lifecycle, 
                   data, 
                   data_block, 
                   instrument_sample_data]
  service: [new_subscription, 
            del_subscription, 
            ingestion_processing, 
            stream_ingestion_policy]


device:
  sbe37:
    host: sbe37-simulator.oceanobservatories.org
    port: 4001
