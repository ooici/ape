# if provided, use different broker for ape messages
# otherwise, will share broker with container
#ape:
#  broker:
#  username:
#  password:
#  exchange:

#couch:
#  type: scale
#  hostname: couch-loadbalancer.dev.oceanobservatories.org
#
#  # bigcouch-specific options
#  username: # if missing, will create random value
#  password:
#  shards: 64
#  replicas: 3
#  read-quorum: 2
#  write-quorum: 2
#
#  cluster:
#    # addresses
#    node-pattern: couch-node%d.dev.oceanobservatories.org
#    node-range: 1-50
#    # startup
#    node-count: 6
#    node-image: r2-worker-20G

# alternate (use existing couchdb):
#couch:
#  type: manual
#  hostname: existing-couch.oceanobservatories.org
#  username: abc123
#  password: xyz987

# alternate (let launch-plan generate couchdb):
#couch:
#  type: launch-generated

#rabbit:
#  type: scale   # or manual or launch-generated
#  hostname: load-balancer.oceanobservatories.org
#  username: # if missing, will create random value
#  password:
#  durable: true
#
#  cluster:
#    # addresses
#    hostname: rabbit.dev.oceanobservatories.org
#    node-pattern: rabbit-%02d.dev.oceanobservatories.org
#    node-range: 1-99
#    # startup
#    node-count: 4
#    node-image: r2-worker
#
#elasticsearch:
#  type: scale   # or manual or launch-generated
#  hostname:
#  username: # if missing, will create random value
#  password:
#
#graylog:
#  type: scale   # or manual or launch-generated
#  hostname:
#  elasticsearch:
#    type: scale   # or manual or launch-generated
#    hostname:
#    username: # if missing, will create random value
#    password:

rabbit:
  type: manual
  hostname: somehost.ooi.org

couch:
  type: manual
  hostname:  otherhost.ooi.org

containers:
  name: scale-test
  launch-plan-template: ../launch-plans/sandbox/lightweight
  cloud-config: ooinimbus.conf
  recipes: https://github.com/newbrough/dt-data/tarball/master
  execution-engines:
    - name: services
      nodes: 5       # initial number of VMs to launch
      containers: 3  # pycc containers per node
      processes: 10  # number of IonProcess slots per container
      # optionally point to configuration file
      deploy-file: some/dir/r2deploy.yml
      deploy-list: *   # all services defined in file
#      deploy-list: [directory, identity_management]   # specific services defined in file

#      # define additional (or all) services explicitly...
#      deploy-apps:
#          - name: directory
#            processapp: [directory, ion.services.coi.directory_service, DirectoryService]
#            deploy:
#              bootlevel: 10
#
#          - name: identity_management
#            processapp: [identity_management, ion.services.coi.identity_management_service, IdentityManagementService]
#            deploy:
#              bootlevel: 10

    - name: transforms
      nodes: 5       # initial number of VMs to launch
      containers: 3  # pycc containers per node
      processes: 10  # number of IonProcess slots per container
      # or start no IonProcesses yet, will add when test runs

system:
  preload:
    directory: res/preload/r2_ioc
    tags: [demo, gummi, scale]
  instruments:
    # "simulated" is a group made up of 450 specific instruments defined in the preload
    - group: simulated
      pattern: ctd-sensor-%03d
      range: 1-450
      output: parsed
  transforms:
    # sequence of transforms, created in order (so output of prior can be found in RR to use as input for next)
    - name: L0                  # name of GROUP of transforms
      count: 1-to-1             # create 1 transform for each member of the input group
      inputs: simulated         # input group can be instruments or other transforms
      module: ion.foo.bar
      class: L0TransformThing
    - name: L1a
      count: 1-to-1
      inputs: L0
      module: ion.foo.bar
      class: L1ATransformThing
    - name: L1b
      count: 1-to-1
      inputs: L1a
      module: ion.foo.bar
      class: L1BTransformThing
    - name: L2a
      count: 1-to-1
      inputs: L2b
      module: ion.foo.bar
      class: L1BTransformThing
    - name: accumulate
      count: 1                 # one transform process consuming multiple inputs
      inputs: L2b
      module: ape.foo.bar
      class: ManyToOne
    - name: measure
      inputs: accumulate
      module: ape.foo.bar
      class: MeasureDataRate   # special class to report message rate back to ape client

